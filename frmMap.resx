<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoCAAAFgAAACgAAAAgAAAAQAAAAAEACAAAAAAAgAQAAAAAAAAAAAAAAAEAAAAA
        AAAAAAAAEAAAAEIAAABSAAAAjAAAAK0AAAC9AAAAMTEAAJwxAADOMQAA/zEAAABCAAD/YwAAAHMAAACM
        AAAAvQAAAP8AABAQEAAYGBgAISEhACkpKQCcADEAMTExAP8xMQDOYzEA/2MxADk5OQAAAEIAQkJCAEpK
        SgBSUlIAWlpaAAAAYwDOAGMAYzFjAGNjYwDOY2MA/2NjAP+cYwBj/2MAa2trAAAAcwBzc3MAAACMAIyM
        jACcMZwAAGOcADFjnAD/nJwAMc6cAGPOnAD/zpwAAACtAK2trQAAAL0Avb29AJwxzgAAY84AY5zOAM7O
        zgD/zs4AMf/OAJz/zgAAAN4A3t7eAAAA7wDv7+8AnAD/AABj/wAxY/8AMZz/AGOc/wDOnP8AMc7/AJzO
        /wAA//8Azv//AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANQAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADU3NQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1NzU3
        NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANTc1Nzc3OwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADU3
        NTc3Nzs3OwAAAAAAAAAAEQARAAAAAAAAAAAAAAA1NzU3Nzc7Nzs7OwAAAAAAAAAREREAAAAAAAAAAAAA
        NTc1Nzc3Ozc7AAAAAAAAAAA6OhETEQAAAAAAAAAAADU3NTc3Nzs3AAA6Ojo6Ojo6Oko6ERwRAAAAAAAA
        AAA1NzU3Nzc7NwA6OkpKSkpKSkpKSjoRHhEAAAAAAAAANTc1Nzc3OzcAOkpKSkpKSkpKSkpKOhEqEQAA
        AAAAADU3NTc3Nzs3ADpKSgAAOjo6OkpKSko6ESwRAAAAAAA1NzU3Nzc7ExMAOkoAExweKiw6SkpKOgAR
        EREAAAAANTc1Nzc3Ozc7OzsAAABNTQA6OkpKSjoAQgAAAAAAADU3NTc3Nzs3Ozs7QAA6SgAAOkpKSko6
        AEJNQgAAAAA1NzU3Nzc7Nzs7O0A7QAA6SkpKSkpKOgBCTUJCTQAANTc1Nzc3Ozc7OztAO0BAQAA6Ojo6
        OjoAQk1CQk0AAAAANTc3Nzs3Ozs7QDtAQEBCQAAAAAAAAEJNQkJNAAAAAAAANzc7Nzs7O0A7QEBAQkBC
        QEJCQkJCTUJCTQAAAAAAAAAAOzc7OztAO0BAQEJAQkBCQkJCQk1CQk0AAAAAAAAAAAAAOzs7QDtAQEBC
        QEJAQkJCQkJNQkJNAAAAAAAAAAAAAAAAO0A7QEBAQkBCQEJCQkJCTUJCTQAAAAAAAAAAAAAAAAAAO0BA
        QEJAQkBCQkJCQk1CQk0AAAAAAAAAAAAAAAAAAAAAQEBCQEJAQkJCQkJNQkJNAAAAAAAAAAAAAAAAAAAA
        AAAAQkBCQEJCQkJCTUJCTQAAAAAAAAAAAAAAAAAAAAAAAAAAQkBCQkJCQk1CQk0AAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAQkJCQkJNQkJNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkJCTUJCTQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAQk1CQk0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQkJNAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAATQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP//f////j////wf///4D///8Af//+AD+P/AAeD/gAAA/wAAAP4AAAD8AAAA+AAAAPAA
        AADgAAADwAAAAYAAAAAAAAABgAAAA8AAAAfgAAAP8AAAH/gAAD/8AAB//gAA//8AAf//gAP//8AH///g
        D///8B////g////8f////v//
</value>
  </data>
</root>